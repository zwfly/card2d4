C51 COMPILER V9.56.0.0   APP_UART                                                          11/12/2017 12:09:06 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_UART
OBJECT MODULE PLACED IN .\Out\Objects\app_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\in
                    -c;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_uart.lst) OBJ
                    -ECT(.\Out\Objects\app_uart.obj)

line level    source

   1          /*
   2           * app_uart.c
   3           *
   4           *  Created on: 2017年8月31日
   5           *      Author: fly
   6           */
   7          
   8          #include "app.h"
   9          #include <string.h>
  10          
  11          #define BT_MODE     0x01
  12          #define FM_MODE     0x02
  13          #define USB_MODE    0x03
  14          #define AUX_MODE    0x04
  15          #define DOME_MODE   0x05
  16          #define CALL_MODE   0x06
  17          
  18          static uint8_t index = 0;
  19          static uint8_t len = 0;
  20          static uint8_t i = 0;
  21          
  22          static uint8_t uart_sendBuf[16] = { 0 };
  23          
  24          void app_uart_Init(void) {
  25   1              index = 0;
  26   1              len = 0;
  27   1              i = 0;
  28   1      }
  29          
  30          void app_uart_send(uint8_t cmd, uint8_t *ptr, uint8_t len) {
  31   1              index = 0;
  32   1      
  33   1              uart_sendBuf[index++] = 0x55;
  34   1              uart_sendBuf[index++] = 0xAA;
  35   1              uart_sendBuf[index++] = len + 1;
  36   1              uart_sendBuf[index++] = cmd;
  37   1              for (i = 0; i < len; i++) {
  38   2                      uart_sendBuf[index++] = *(ptr + i);
  39   2              }
  40   1              uart_sendBuf[index++] = app_CalcCRC8(uart_sendBuf, len + 4);
  41   1      
  42   1              for (i = 0; i < (len + 5); i++) {
  43   2                      Send_Data_To_UART0(uart_sendBuf[i]);
  44   2              }
  45   1      }
  46          
  47          void app_uart_pro(void) {
  48   1              while (riflag) {
  49   2                      riflag--;
  50   2                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE >= 4) {
  51   3                              if (((rcv_T.rxBuf[rcv_T.pRead]) == 0x55)
  52   3                                              && ((rcv_T.rxBuf[(rcv_T.pRead + 1) % RCV_BUFSIZE]) == 0xAA)) {
  53   4                                      len = rcv_T.rxBuf[(rcv_T.pRead + 2) % RCV_BUFSIZE];
C51 COMPILER V9.56.0.0   APP_UART                                                          11/12/2017 12:09:06 PAGE 2   

  54   4                                      if ((rcv_T.pWrite + RCV_BUFSIZE - rcv_T.pRead) % RCV_BUFSIZE
  55   4                                                      >= (len + 4)) {
  56   5                                              if (rcv_T.rxBuf[(rcv_T.pRead + len + 3) % RCV_BUFSIZE]
  57   5                                                              != app_CalcCRC8_cycle(rcv_T.rxBuf + rcv_T.pRead,
  58   5                                                                              len + 3, rcv_T.pRead, RCV_BUFSIZE)) {
  59   6                                                      rcv_T.pRead++;
  60   6                                              } else {
  61   6                                                      index = 0;
  62   6                                                      memset(sendBuf, 0, PAYLOAD_WIDTH);
  63   6                                                      switch (rcv_T.rxBuf[(rcv_T.pRead + 3) % RCV_BUFSIZE]) {
  64   7                                                      case BLINK_METHOD_CMD:  //闪法
  65   7                                                      {
  66   8                                                              uint8_t index = 0;
  67   8                                                              index =
  68   8                                                                              rcv_T.rxBuf[(rcv_T.pRead + 12) % RCV_BUFSIZE];
  69   8      
  70   8                                                              if (index >= (DEFAULT_DOME_NUM - 1)) {
  71   9                                                                      break;
  72   9                                                              }
  73   8      
  74   8                                                              for (i = 0; i < (DEFAULT_DOME_NUM - 1 - index);
  75   8                                                                              i++) {
  76   9                                                                      app_eeprom_write_byte(
  77   9                                                                                      index * sizeof(DOME_DEFAULT_T)
  78   9                                                                                                      + (&dome_blink.header.index
  79   9                                                                                                                      - &dome_blink), 0);
  80   9                                                              }
  81   8                                                              for (i = 0; i < sizeof(DOME_DEFAULT_T); i++) {
  82   9                                                                      app_eeprom_write_byte(
  83   9                                                                                      index * sizeof(DOME_DEFAULT_T) + i,
  84   9                                                                                      rcv_T.rxBuf[(rcv_T.pRead + 4 + i)
  85   9                                                                                                      % RCV_BUFSIZE]);
  86   9                                                              }
  87   8                                                              app_uart_send(BLINK_METHOD_CMD, &index, 1);
  88   8                                                      }
  89   7                                                              break;
  90   7                                                      case RCV_VOL_CMD:
  91   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
  92   7                                                              sendBuf[index++] = len;
  93   7                                                              sendBuf[index++] = RCV_VOL_CMD;
  94   7                                                              for (i = 0; i < (len - 1); i++) {
  95   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
  96   8                                                                                      + i) % RCV_BUFSIZE];
  97   8                                                              }
  98   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
  99   8                                                                      sendBuf[index] += sendBuf[i + 1];
 100   8                                                              }
 101   7                                                              index++;
 102   7                                                              app_2d4_send(sendBuf, index);
 103   7                                                              break;
 104   7                                                      case RCV_POWER_STATUS_CMD:
 105   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 106   7                                                              sendBuf[index++] = len;
 107   7                                                              sendBuf[index++] = RCV_POWER_STATUS_CMD;
 108   7                                                              for (i = 0; i < (len - 1); i++) {
 109   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 110   8                                                                                      + i) % RCV_BUFSIZE];
 111   8                                                              }
 112   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 113   8                                                                      sendBuf[index] += sendBuf[i + 1];
 114   8                                                              }
 115   7                                                              index++;
C51 COMPILER V9.56.0.0   APP_UART                                                          11/12/2017 12:09:06 PAGE 3   

 116   7                                                              app_2d4_send(sendBuf, index);
 117   7                                                              break;
 118   7      #if 0
                                                                      case RCV_X_BOX_STATUS_CMD:
                                                                      sendBuf[index++] = LAMP2LCD_HEADER;
                                                                      sendBuf[index++] = len;
                                                                      sendBuf[index++] = RCV_X_BOX_STATUS_CMD;
                                                                      for (i = 0; i < (len - 1); i++) {
                                                                              sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
                                                                                              + i) % RCV_BUFSIZE];
                                                                      }
                                                                      for (i = 0; i < (sendBuf[1] + 1); i++) {
                                                                              sendBuf[index] += sendBuf[i + 1];
                                                                      }
                                                                      index++;
                                                                      app_2d4_send(sendBuf, index);
                                                                      break;
              #endif
 134   7                                                      case RCV_BT_STATUS_CMD:
 135   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 136   7                                                              sendBuf[index++] = len;
 137   7                                                              sendBuf[index++] = RCV_BT_STATUS_CMD;
 138   7                                                              for (i = 0; i < (len - 1); i++) {
 139   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 140   8                                                                                      + i) % RCV_BUFSIZE];
 141   8                                                              }
 142   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 143   8                                                                      sendBuf[index] += sendBuf[i + 1];
 144   8                                                              }
 145   7                                                              index++;
 146   7                                                              if (g_tWork.status.bits.DOME == 0) {
 147   8                                                                      app_2d4_send(sendBuf, index);
 148   8                                                              }
 149   7                                                              break;
 150   7                                                      case RCV_PREV_NEXT_CMD:
 151   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 152   7                                                              sendBuf[index++] = len;
 153   7                                                              sendBuf[index++] = RCV_PREV_NEXT_CMD;
 154   7                                                              for (i = 0; i < (len - 1); i++) {
 155   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 156   8                                                                                      + i) % RCV_BUFSIZE];
 157   8                                                              }
 158   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 159   8                                                                      sendBuf[index] += sendBuf[i + 1];
 160   8                                                              }
 161   7                                                              index++;
 162   7                                                              app_2d4_send(sendBuf, index);
 163   7                                                              break;
 164   7                                                      case RCV_USB_PLAY_TIME_CMD:
 165   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 166   7                                                              sendBuf[index++] = len;
 167   7                                                              sendBuf[index++] = RCV_USB_PLAY_TIME_CMD;
 168   7                                                              for (i = 0; i < (len - 1); i++) {
 169   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 170   8                                                                                      + i) % RCV_BUFSIZE];
 171   8                                                              }
 172   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 173   8                                                                      sendBuf[index] += sendBuf[i + 1];
 174   8                                                              }
 175   7                                                              index++;
 176   7                                                              if (g_tWork.status.bits.DOME == 0) {
 177   8                                                                      app_2d4_send(sendBuf, index);
C51 COMPILER V9.56.0.0   APP_UART                                                          11/12/2017 12:09:06 PAGE 4   

 178   8                                                              }
 179   7                                                              break;
 180   7                                                      case RCV_FM_HZ_CMD:
 181   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 182   7                                                              sendBuf[index++] = len;
 183   7                                                              sendBuf[index++] = RCV_FM_HZ_CMD;
 184   7                                                              for (i = 0; i < (len - 1); i++) {
 185   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 186   8                                                                                      + i) % RCV_BUFSIZE];
 187   8                                                              }
 188   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 189   8                                                                      sendBuf[index] += sendBuf[i + 1];
 190   8                                                              }
 191   7                                                              index++;
 192   7                                                              if (g_tWork.status.bits.DOME == 0) {
 193   8                                                                      app_2d4_send(sendBuf, index);
 194   8                                                              }
 195   7                                                              break;
 196   7                                                      case MODE_CHANGE_CMD:   //MODE
 197   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 198   7                                                              sendBuf[index++] = len;
 199   7                                                              sendBuf[index++] = MODE_CHANGE_CMD;
 200   7                                                              for (i = 0; i < (len - 1); i++) {
 201   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 202   8                                                                                      + i) % RCV_BUFSIZE];
 203   8                                                              }
 204   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 205   8                                                                      sendBuf[index] += sendBuf[i + 1];
 206   8                                                              }
 207   7                                                              index++;
 208   7                                                              app_2d4_send(sendBuf, index);
 209   7                                                              break;
 210   7                                                      case RCV_PLAY_PAUSE_STATUS_CMD:
 211   7                                                              sendBuf[index++] = LAMP2LCD_HEADER;
 212   7                                                              sendBuf[index++] = len;
 213   7                                                              sendBuf[index++] = RCV_PLAY_PAUSE_STATUS_CMD;
 214   7                                                              for (i = 0; i < (len - 1); i++) {
 215   8                                                                      sendBuf[index++] = rcv_T.rxBuf[(rcv_T.pRead + 4
 216   8                                                                                      + i) % RCV_BUFSIZE];
 217   8                                                              }
 218   7                                                              for (i = 0; i < (sendBuf[1] + 1); i++) {
 219   8                                                                      sendBuf[index] += sendBuf[i + 1];
 220   8                                                              }
 221   7                                                              index++;
 222   7                                                              if (g_tWork.status.bits.DOME == 0) {
 223   8                                                                      app_2d4_send(sendBuf, index);
 224   8                                                              }
 225   7                                                              break;
 226   7                                                              /// app --start
 227   7                                                      case APP_COLOR_ATLA_CMD:
 228   7      #if 1
 229   7                                                              app_dome_rgb(
 230   7                                                                              rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE],
 231   7                                                                              rcv_T.rxBuf[(rcv_T.pRead + 5) % RCV_BUFSIZE],
 232   7                                                                              rcv_T.rxBuf[(rcv_T.pRead + 6) % RCV_BUFSIZE]);
 233   7      #else
                                                                      app_dome_rgb(0xFFFF, 0xFFFF, 0xFFFF);
              #endif
 236   7                                                              break;
 237   7                                                      case APP_BRIGHT_CMD:
 238   7                                                              dome_running_param.bright = rcv_T.rxBuf[(rcv_T.pRead
 239   7                                                                              + 4) % RCV_BUFSIZE];
C51 COMPILER V9.56.0.0   APP_UART                                                          11/12/2017 12:09:06 PAGE 5   

 240   7                                                              Light_bright_set(
 241   7                                                                              rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]);
 242   7                                                              break;
 243   7                                                      case APP_SPEED_CMD:
 244   7                                                              dome_running_param.speed = rcv_T.rxBuf[(rcv_T.pRead
 245   7                                                                              + 4) % RCV_BUFSIZE];
 246   7                                                              break;
 247   7                                                      case APP_FLASH_INDEX_CMD:
 248   7                                                              app_dome_start(
 249   7                                                                              rcv_T.rxBuf[(rcv_T.pRead + 4) % RCV_BUFSIZE]);
 250   7                                                              break;
 251   7                                                              /// app --end
 252   7                                                      default:
 253   7                                                              break;
 254   7                                                      }
 255   6                                                      rcv_T.pRead += len + 4;
 256   6      #if 1
 257   6                                                      rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 258   6      //                                              break;
 259   6                                                      return;
 260   6      #endif
 261   6                                              }
 262   5                                      }
 263   4                              } else {
 264   4                                      rcv_T.pRead++;
 265   4                              }
 266   3                              rcv_T.pRead = rcv_T.pRead % RCV_BUFSIZE;
 267   3                      }
 268   2              }
 269   1      
 270   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2882    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     19       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
