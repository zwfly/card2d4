C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 10:54:39 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) TABS(
                    -2) OBJECT(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          static uint8_t press_long_lock = 0;
  11          
  12          //static idata uint8_t buf[PAYLOAD_WIDTH] = {0};
  13          #if 0
              void app_key_init(void) {
              
              }
              
              void app_power_on(void) {
                SW_Reset();  //复位
              }
              void app_power_off(void) {
              //  lcd_bright_off();
                LCD_Clear_All();
              }
              #endif
  26          
  27          static void app_send_key(uint8_t key, uint8_t *index) {
  28   1        uint8_t i = 0;
  29   1        Repeat_Stop();
  30   1        Repeat_SetStart(bsp_led_on);
  31   1        Repeat_SetStop(bsp_led_off);
  32   1        Repeat_Start(3, 1, 1);
  33   1      
  34   1        sendBuf[(*index)++] = LCD2LAMP_HEADER;
  35   1        sendBuf[(*index)++] = 0x01;
  36   1        sendBuf[(*index)++] = key;
  37   1        for (i = 0; i < (sendBuf[1] + 1); i++) {
  38   2          sendBuf[*index] += sendBuf[i + 1];
  39   2        }
  40   1      }
  41          
  42          void app_key_pro(uint8_t keyCode) {
  43   1        uint8_t index = 0;
  44   1        uint8_t i = 0;
  45   1      
  46   1        if (g_tWork.match_code_mode) {
  47   2          return;
  48   2        }
  49   1      
  50   1        index = 0;
  51   1        memset(sendBuf, 0, PAYLOAD_WIDTH);
  52   1        switch (keyCode) {
  53   2        case KEY_UP_K1:   //mode power
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 10:54:39 PAGE 2   

  54   2          if (press_long_lock == 0) {
  55   3            app_send_key(KEY_MODE_POWER_CMD, &index);
  56   3          }
  57   2          press_long_lock = 0;
  58   2          break;
  59   2        case KEY_DOWN_K1:
  60   2      
  61   2          break;
  62   2        case KEY_LONG_K1:   //power long
  63   2          press_long_lock = 1;
  64   2          app_send_key(KEY_MODE_POWER_LONG_CMD, &index);
  65   2          break;
  66   2        case KEY_UP_K2:   //prev vol-
  67   2          if (press_long_lock == 0) {
  68   3            app_send_key(KEY_PREV_VOL_MINUS_CMD, &index);
  69   3          }
  70   2          press_long_lock = 0;
  71   2          break;
  72   2        case KEY_DOWN_K2:
  73   2          if (press_long_lock) {
  74   3            app_send_key(KEY_PREV_VOL_MINUS_LONG_CMD, &index);
  75   3          }
  76   2          break;
  77   2        case KEY_LONG_K2:
  78   2          press_long_lock = 1;
  79   2          app_send_key(KEY_PREV_VOL_MINUS_LONG_CMD, &index);
  80   2          break;
  81   2        case KEY_UP_K3:   // play BT
  82   2          if (press_long_lock == 0) {
  83   3            app_send_key(KEY_PLAY_BT_CALL_CMD, &index);
  84   3          }
  85   2          press_long_lock = 0;
  86   2          break;
  87   2        case KEY_DOWN_K3:
  88   2          break;
  89   2        case KEY_LONG_K3:
  90   2          press_long_lock = 1;
  91   2          app_send_key(KEY_PLAY_BT_CALL_LONG_CMD, &index);
  92   2          break;
  93   2        case KEY_UP_K4:   // next vol+
  94   2          if (press_long_lock == 0) {
  95   3            app_send_key(KEY_NEXT_VOL_ADD_CMD, &index);
  96   3          }
  97   2          press_long_lock = 0;
  98   2          break;
  99   2        case KEY_DOWN_K4:
 100   2          if (press_long_lock) {
 101   3            app_send_key(KEY_NEXT_VOL_ADD_LONG_CMD, &index);
 102   3          }
 103   2          break;
 104   2        case KEY_LONG_K4:
 105   2          press_long_lock = 1;
 106   2          app_send_key(KEY_NEXT_VOL_ADD_LONG_CMD, &index);
 107   2          break;
 108   2        case KEY_UP_K5:   //power
 109   2          app_send_key(KEY_POWER_CMD, &index);
 110   2          break;
 111   2        case KEY_DOWN_K5:
 112   2          break;
 113   2        case KEY_LONG_K5:
 114   2          break;
 115   2        case KEY_UP_K6:   // NC
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 10:54:39 PAGE 3   

 116   2          break;
 117   2        case KEY_DOWN_K6:
 118   2          break;
 119   2        case KEY_LONG_K6:
 120   2          break;
 121   2        case KEY_UP_K7:   // mode+
 122   2          break;
 123   2        case KEY_DOWN_K7:
 124   2          app_send_key(KEY_MODE_ADD_CMD, &index);
 125   2          break;
 126   2        case KEY_LONG_K7:
 127   2          break;
 128   2        case KEY_UP_K8:   // NC
 129   2          break;
 130   2        case KEY_DOWN_K8:
 131   2          break;
 132   2        case KEY_LONG_K8:
 133   2          break;
 134   2        case KEY_UP_K9:   // NC
 135   2          break;
 136   2        case KEY_DOWN_K9:
 137   2          break;
 138   2        case KEY_LONG_K9:
 139   2          break;
 140   2        case KEY_UP_K10:   //speed+
 141   2          break;
 142   2        case KEY_DOWN_K10:
 143   2          app_send_key(KEY_SPEED_ADD_CMD, &index);
 144   2          break;
 145   2        case KEY_LONG_K10:
 146   2          break;
 147   2        case KEY_UP_K11:   //DEMO
 148   2          app_send_key(KEY_DEMO_CMD, &index);
 149   2          break;
 150   2        case KEY_DOWN_K11:
 151   2          break;
 152   2        case KEY_LONG_K11:
 153   2          break;
 154   2        case KEY_UP_K12:   //speed-
 155   2          break;
 156   2        case KEY_DOWN_K12:
 157   2          app_send_key(KEY_SPEED_MINUS_CMD, &index);
 158   2          break;
 159   2        case KEY_LONG_K12:
 160   2          break;
 161   2        case KEY_UP_K13:   // NC
 162   2          break;
 163   2        case KEY_DOWN_K13:
 164   2          break;
 165   2        case KEY_LONG_K13:
 166   2          break;
 167   2        case KEY_UP_K14:   // COLOR+
 168   2          break;
 169   2        case KEY_DOWN_K14:
 170   2          app_send_key(KEY_COLOR_ADD_CMD, &index);
 171   2          break;
 172   2        case KEY_LONG_K14:
 173   2          break;
 174   2        case KEY_UP_K15:   // MODE-
 175   2          break;
 176   2        case KEY_DOWN_K15:
 177   2          app_send_key(KEY_MODE_CMD, &index);
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 10:54:39 PAGE 4   

 178   2          break;
 179   2        case KEY_LONG_K15:
 180   2          break;
 181   2        case KEY_UP_K16:   // bright+
 182   2          break;
 183   2        case KEY_DOWN_K16:
 184   2          app_send_key(KEY_BRIGHT_ADD_CMD, &index);
 185   2          break;
 186   2        case KEY_LONG_K16:
 187   2          break;
 188   2        case KEY_UP_K17:   // NC
 189   2          break;
 190   2        case KEY_DOWN_K17:
 191   2          break;
 192   2        case KEY_LONG_K17:
 193   2          break;
 194   2        case KEY_UP_K18:   // COLOR-
 195   2          break;
 196   2        case KEY_DOWN_K18:
 197   2          app_send_key(KEY_COLOR_MINUS_CMD, &index);
 198   2          break;
 199   2        case KEY_LONG_K18:
 200   2          break;
 201   2        case KEY_UP_K19:   // NC
 202   2          break;
 203   2        case KEY_DOWN_K19:
 204   2          break;
 205   2        case KEY_LONG_K19:
 206   2          break;
 207   2        case KEY_UP_K20:   // bright-
 208   2          break;
 209   2        case KEY_DOWN_K20:
 210   2          app_send_key(KEY_BRIGHT_MINUS_CMD, &index);
 211   2          break;
 212   2        case KEY_LONG_K20:
 213   2          break;
 214   2        case KEY_UP_K21:   // num 1
 215   2          if (press_long_lock == 0) {
 216   3            app_send_key(KEY_NUM_1_CMD, &index);
 217   3          }
 218   2          press_long_lock = 0;
 219   2          break;
 220   2        case KEY_DOWN_K21:
 221   2          break;
 222   2        case KEY_LONG_K21:
 223   2          press_long_lock = 1;
 224   2          break;
 225   2        case KEY_UP_K22:   // num 2
 226   2          app_send_key(KEY_NUM_2_CMD, &index);
 227   2          break;
 228   2        case KEY_DOWN_K22:
 229   2          break;
 230   2        case KEY_LONG_K22:
 231   2          break;
 232   2        case KEY_UP_K23:   // num 3
 233   2          app_send_key(KEY_NUM_3_CMD, &index);
 234   2          break;
 235   2        case KEY_DOWN_K23:
 236   2          break;
 237   2        case KEY_LONG_K23:
 238   2          break;
 239   2        case KEY_UP_K24:   // num 4
C51 COMPILER V9.52.0.0   APP_KEY                                                           12/16/2017 10:54:39 PAGE 5   

 240   2          app_send_key(KEY_NUM_4_CMD, &index);
 241   2          break;
 242   2        case KEY_DOWN_K24:
 243   2          break;
 244   2        case KEY_LONG_K24:
 245   2          break;
 246   2        case KEY_UP_K21_24:   // num 1 and 4
 247   2          break;
 248   2        case KEY_DOWN_K21_24:
 249   2          break;
 250   2        case KEY_LONG_K21_24:
 251   2          g_tWork.match_code_mode = 1;
 252   2          app_2d4_switch_public_address();
 253   2          Repeat_Stop();
 254   2          Repeat_SetStart(bsp_led_on);
 255   2          Repeat_SetStop(bsp_led_off);
 256   2          Repeat_Start(1, 4, 0);
 257   2      
 258   2          index = 0;
 259   2          break;
 260   2        default:
 261   2          break;
 262   2        }
 263   1        if (index) {
 264   2          index++;
 265   2          app_2d4_send(sendBuf, index);
 266   2        }
 267   1      
 268   1      }
 269          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    860    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
