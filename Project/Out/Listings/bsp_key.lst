C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) OBJEC
                    -T(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *      模块名称 : 独立按键驱动模块
   5           *      文件名称 : bsp_key.c
   6           *      版    本 : V1.0
   7           *      说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *                              (1) 按键按下
   9           *                              (2) 按键弹起
  10           *                              (3) 长按键
  11           *                              (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          #include <string.h>
  18          
  19          #if 0
              static idata KEY_T s_tBtn[KEY_COUNT];
              static idata KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
              #else
  23          static KEY_T s_tBtn[KEY_COUNT];
  24          static KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  25          #endif
  26          
  27          static void bsp_InitKeyVar(void);
  28          static void bsp_InitKeyHard(void);
  29          static void bsp_DetectKey(uint8_t i);
  30          
  31          /*
  32           *********************************************************************************************************
  33           *      函 数 名: IsKeyDownX
  34           *      功能说明: 判断按键是否按下
  35           *      形    参: 无
  36           *      返 回 值: 返回值1 表示按下，0表示未按下
  37           *********************************************************************************************************
  38           */
  39          
  40          static uint8_t IsKeyDown(uint8_t line, uint8_t column) {
  41   1              uint8_t ret = 0;
  42   1      
  43   1              switch (line) {
  44   2              case 0:
  45   2                      P02 = 0;
  46   2                      P03 = 1;
  47   2                      P04 = 1;
  48   2                      P05 = 1;
  49   2                      P06 = 1;
  50   2                      P07 = 1;
  51   2      
  52   2                      P14 = 1;
  53   2                      P15 = 1;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 2   

  54   2                      P16 = 1;
  55   2                      P17 = 1;
  56   2                      switch (column) {
  57   3                      case 0:
  58   3                              ret = ~P17;
  59   3                              break;
  60   3                      case 1:
  61   3                              ret = ~P16;
  62   3                              break;
  63   3                      case 2:
  64   3                              ret = ~P15;
  65   3                              break;
  66   3                      case 3:
  67   3                              ret = ~P14;
  68   3                              break;
  69   3                      default:
  70   3                              break;
  71   3                      }
  72   2                      break;
  73   2              case 1:
  74   2                      P02 = 1;
  75   2                      P03 = 0;
  76   2                      P04 = 1;
  77   2                      P05 = 1;
  78   2                      P06 = 1;
  79   2                      P07 = 1;
  80   2      
  81   2                      P14 = 1;
  82   2                      P15 = 1;
  83   2                      P16 = 1;
  84   2                      P17 = 1;
  85   2                      switch (column) {
  86   3                      case 0:
  87   3                              ret = ~P17;
  88   3                              break;
  89   3                      case 1:
  90   3                              ret = ~P16;
  91   3                              break;
  92   3                      case 2:
  93   3                              ret = ~P15;
  94   3                              break;
  95   3                      case 3:
  96   3                              ret = ~P14;
  97   3                              break;
  98   3                      default:
  99   3                              break;
 100   3                      }
 101   2                      break;
 102   2              case 2:
 103   2                      P02 = 1;
 104   2                      P03 = 1;
 105   2                      P04 = 0;
 106   2                      P05 = 1;
 107   2                      P06 = 1;
 108   2                      P07 = 1;
 109   2      
 110   2                      P14 = 1;
 111   2                      P15 = 1;
 112   2                      P16 = 1;
 113   2                      P17 = 1;
 114   2                      switch (column) {
 115   3                      case 0:
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 3   

 116   3                              ret = ~P17;
 117   3                              break;
 118   3                      case 1:
 119   3                              ret = ~P16;
 120   3                              break;
 121   3                      case 2:
 122   3                              ret = ~P15;
 123   3                              break;
 124   3                      case 3:
 125   3                              ret = ~P14;
 126   3                              break;
 127   3                      default:
 128   3                              break;
 129   3                      }
 130   2                      break;
 131   2              case 3:
 132   2                      P02 = 1;
 133   2                      P03 = 1;
 134   2                      P04 = 1;
 135   2                      P05 = 0;
 136   2                      P06 = 1;
 137   2                      P07 = 1;
 138   2      
 139   2                      P14 = 1;
 140   2                      P15 = 1;
 141   2                      P16 = 1;
 142   2                      P17 = 1;
 143   2                      switch (column) {
 144   3                      case 0:
 145   3                              ret = ~P17;
 146   3                              break;
 147   3                      case 1:
 148   3                              ret = ~P16;
 149   3                              break;
 150   3                      case 2:
 151   3                              ret = ~P15;
 152   3                              break;
 153   3                      case 3:
 154   3                              ret = ~P14;
 155   3                              break;
 156   3                      default:
 157   3                              break;
 158   3                      }
 159   2                      break;
 160   2              case 4:
 161   2                      P02 = 1;
 162   2                      P03 = 1;
 163   2                      P04 = 1;
 164   2                      P05 = 1;
 165   2                      P06 = 0;
 166   2                      P07 = 1;
 167   2      
 168   2                      P14 = 1;
 169   2                      P15 = 1;
 170   2                      P16 = 1;
 171   2                      P17 = 1;
 172   2                      switch (column) {
 173   3                      case 0:
 174   3                              ret = ~P17;
 175   3                              break;
 176   3                      case 1:
 177   3                              ret = ~P16;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 4   

 178   3                              break;
 179   3                      case 2:
 180   3                              ret = ~P15;
 181   3                              break;
 182   3                      case 3:
 183   3                              ret = ~P14;
 184   3                              break;
 185   3                      default:
 186   3                              break;
 187   3                      }
 188   2                      break;
 189   2              }
 190   1      
 191   1              return 0;
 192   1      }
 193          
 194          static uint8_t IsKeyDown1(void) {
 195   1              return IsKeyDown(0, 0);
 196   1      }
 197          
 198          static uint8_t IsKeyDown2(void) {
 199   1      
 200   1              return IsKeyDown(0, 1);
 201   1      }
 202          
 203          static uint8_t IsKeyDown3(void) {
 204   1              return IsKeyDown(0, 2);
 205   1      }
 206          //CH1, S4 ad = 884
 207          static uint8_t IsKeyDown4(void) {
 208   1              return IsKeyDown(0, 3);
 209   1      }
 210          
 211          static uint8_t IsKeyDown5(void) {
 212   1      
 213   1              return IsKeyDown(1, 0);
 214   1      }
 215          
 216          static uint8_t IsKeyDown6(void) {
 217   1              return IsKeyDown(1, 1);
 218   1      }
 219          
 220          static uint8_t IsKeyDown7(void) {
 221   1              return IsKeyDown(1, 2);
 222   1      }
 223          
 224          static uint8_t IsKeyDown8(void) {
 225   1              return IsKeyDown(1, 3);
 226   1      }
 227          
 228          static uint8_t IsKeyDown9(void) {
 229   1              return IsKeyDown(2, 0);
 230   1      }
 231          
 232          static uint8_t IsKeyDown10(void) {
 233   1              return IsKeyDown(2, 1);
 234   1      }
 235          static uint8_t IsKeyDown11(void) {
 236   1              return IsKeyDown(2, 2);
 237   1      }
 238          static uint8_t IsKeyDown12(void) {
 239   1              return IsKeyDown(2, 3);
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 5   

 240   1      }
 241          static uint8_t IsKeyDown13(void) {
 242   1              return IsKeyDown(3, 0);
 243   1      }
 244          static uint8_t IsKeyDown14(void) {
 245   1              return IsKeyDown(3, 1);
 246   1      }
 247          static uint8_t IsKeyDown15(void) {
 248   1              return IsKeyDown(3, 2);
 249   1      }
 250          static uint8_t IsKeyDown16(void) {
 251   1              return IsKeyDown(3, 3);
 252   1      }
 253          static uint8_t IsKeyDown17(void) {
 254   1              return IsKeyDown(4, 0);
 255   1      }
 256          static uint8_t IsKeyDown18(void) {
 257   1              return IsKeyDown(4, 1);
 258   1      }
 259          static uint8_t IsKeyDown19(void) {
 260   1              return IsKeyDown(4, 2);
 261   1      }
 262          static uint8_t IsKeyDown20(void) {
 263   1              return IsKeyDown(4, 3);
 264   1      }
 265          static uint8_t IsKeyDown21(void) {
 266   1              return IsKeyDown(5, 0);
 267   1      }
 268          static uint8_t IsKeyDown22(void) {
 269   1              return IsKeyDown(5, 1);
 270   1      }
 271          static uint8_t IsKeyDown23(void) {
 272   1              return IsKeyDown(5, 2);
 273   1      }
 274          static uint8_t IsKeyDown24(void) {
 275   1              return IsKeyDown(5, 3);
 276   1      }
 277          /*
 278           *********************************************************************************************************
 279           *      函 数 名: bsp_InitKey
 280           *      功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
 281           *      形    参:  无
 282           *      返 回 值: 无
 283           *********************************************************************************************************
 284           */
 285          void bsp_InitKey(void) {
 286   1              bsp_InitKeyVar(); /* 初始化按键变量 */
 287   1              bsp_InitKeyHard(); /* 初始化按键硬件 */
 288   1      }
 289          
 290          /*
 291           *********************************************************************************************************
 292           *      函 数 名: bsp_PutKey
 293           *      功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
 294           *      形    参:  _KeyCode : 按键代码
 295           *      返 回 值: 无
 296           *********************************************************************************************************
 297           */
 298          void bsp_PutKey(uint8_t _KeyCode) {
 299   1              s_tKey.Buf[s_tKey.Write] = _KeyCode;
 300   1      
 301   1              if (++s_tKey.Write >= KEY_FIFO_SIZE) {
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 6   

 302   2                      s_tKey.Write = 0;
 303   2              }
 304   1      }
 305          
 306          /*
 307           *********************************************************************************************************
 308           *      函 数 名: bsp_GetKey
 309           *      功能说明: 从按键FIFO缓冲区读取一个键值。
 310           *      形    参:  无
 311           *      返 回 值: 按键代码
 312           *********************************************************************************************************
 313           */
 314          uint8_t bsp_GetKey(void) {
 315   1              uint8_t ret;
 316   1      
 317   1              if (s_tKey.Read == s_tKey.Write) {
 318   2                      return KEY_NONE;
 319   2              } else {
 320   2                      ret = s_tKey.Buf[s_tKey.Read];
 321   2      
 322   2                      if (++s_tKey.Read >= KEY_FIFO_SIZE) {
 323   3                              s_tKey.Read = 0;
 324   3                      }
 325   2                      return ret;
 326   2              }
 327   1      }
 328          
 329          /*
 330           *********************************************************************************************************
 331           *      函 数 名: bsp_GetKey2
 332           *      功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
 333           *      形    参:  无
 334           *      返 回 值: 按键代码
 335           *********************************************************************************************************
 336           */
 337          uint8_t bsp_GetKey2(void) {
 338   1              uint8_t ret;
 339   1      
 340   1              if (s_tKey.Read2 == s_tKey.Write) {
 341   2                      return KEY_NONE;
 342   2              } else {
 343   2                      ret = s_tKey.Buf[s_tKey.Read2];
 344   2      
 345   2                      if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 346   3                              s_tKey.Read2 = 0;
 347   3                      }
 348   2                      return ret;
 349   2              }
 350   1      }
 351          
 352          /*
 353           *********************************************************************************************************
 354           *      函 数 名: bsp_GetKeyState
 355           *      功能说明: 读取按键的状态
 356           *      形    参:  _ucKeyID : 按键ID，从0开始
 357           *      返 回 值: 1 表示按下， 0 表示未按下
 358           *********************************************************************************************************
 359           */
 360          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 361   1              return s_tBtn[_ucKeyID].State;
 362   1      }
 363          
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 7   

 364          /*
 365           *********************************************************************************************************
 366           *      函 数 名: bsp_SetKeyParam
 367           *      功能说明: 设置按键参数
 368           *      形    参：_ucKeyID : 按键ID，从0开始
 369           *                      _LongTime : 长按事件时间
 370           *                       _RepeatSpeed : 连发速度
 371           *      返 回 值: 无
 372           *********************************************************************************************************
 373           */
 374          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 375   1              s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 376   1              s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 377   1              s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 378   1      }
 379          
 380          /*
 381           *********************************************************************************************************
 382           *      函 数 名: bsp_ClearKey
 383           *      功能说明: 清空按键FIFO缓冲区
 384           *      形    参：无
 385           *      返 回 值: 按键代码
 386           *********************************************************************************************************
 387           */
 388          void bsp_ClearKey(void) {
 389   1              s_tKey.Read = s_tKey.Write;
 390   1      }
 391          
 392          /*
 393           *********************************************************************************************************
 394           *      函 数 名: bsp_InitKeyHard
 395           *      功能说明: 配置按键对应的GPIO
 396           *      形    参:  无
 397           *      返 回 值: 无
 398           *********************************************************************************************************
 399           */
 400          static void bsp_InitKeyHard(void) {
 401   1              clr_P0M1_2;
 402   1              clr_P0M2_2;
 403   1      
 404   1              clr_P0M1_3;
 405   1              clr_P0M2_3;
 406   1      
 407   1              clr_P0M1_4;
 408   1              clr_P0M2_4;
 409   1      
 410   1              clr_P0M1_5;
 411   1              clr_P0M2_5;
 412   1      
 413   1              clr_P0M1_6;
 414   1              clr_P0M2_6;
 415   1      
 416   1              clr_P0M1_7;
 417   1              clr_P0M2_7;
 418   1      
 419   1              clr_P1M1_4;
 420   1              P1M2 &= ~0x10;
 421   1      
 422   1              clr_P1M1_5;
 423   1              P1M2 &= ~0x20;
 424   1      
 425   1              clr_P1M1_6;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 8   

 426   1              P1M2 &= ~0x40;
 427   1      
 428   1              clr_P1M1_7;
 429   1              P1M2 &= ~0x80;
 430   1      }
 431          
 432          /*
 433           *********************************************************************************************************
 434           *      函 数 名: bsp_InitKeyVar
 435           *      功能说明: 初始化按键变量
 436           *      形    参:  无
 437           *      返 回 值: 无
 438           *********************************************************************************************************
 439           */
 440          static void bsp_InitKeyVar(void) {
 441   1              uint8_t i = 0;
 442   1      
 443   1              memset((uint8_t *) &s_tBtn, 0, sizeof(s_tBtn));
 444   1      
 445   1              /* 对按键FIFO读写指针清零 */
 446   1              s_tKey.Read = 0;
 447   1              s_tKey.Write = 0;
 448   1              s_tKey.Read2 = 0;
 449   1      
 450   1              /* 给每个按键结构体成员变量赋一组缺省值 */
 451   1              for (i = 0; i < KEY_COUNT; i++) {
 452   2                      s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 453   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 454   2                      s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 455   2                      //s_tBtn[i].KeyCodeDown = 3 * i + 1;                            /* 按键按下的键值代码 */
 456   2                      //s_tBtn[i].KeyCodeUp   = 3 * i + 2;                            /* 按键弹起的键值代码 */
 457   2                      //s_tBtn[i].KeyCodeLong = 3 * i + 3;                            /* 按键被持续按下的键值代码 */
 458   2                      s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 459   2                      s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 460   2              }
 461   1      
 462   1      //      s_tBtn[3].RepeatSpeed = 50; /* 按键连发的速度，0表示不支持连发 */
 463   1      //      s_tBtn[4].RepeatSpeed = 50; /* 按键连发的速度，0表示不支持连发 */
 464   1      
 465   1              /* 判断按键按下的函数 */
 466   1              i = 0;
 467   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown1;
 468   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown2;
 469   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown3;
 470   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown4;
 471   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown5;
 472   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown6;
 473   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown7;
 474   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown8;
 475   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown9;
 476   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown10;
 477   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown11;
 478   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown12;
 479   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown13;
 480   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown14;
 481   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown15;
 482   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown16;
 483   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown17;
 484   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown18;
 485   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown19;
 486   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown20;
 487   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown21;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 9   

 488   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown22;
 489   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown23;
 490   1              s_tBtn[i++].IsKeyDownFunc = IsKeyDown24;
 491   1      
 492   1      }
 493          
 494          /*
 495           *********************************************************************************************************
 496           *      函 数 名: bsp_DetectKey
 497           *      功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 498           *      形    参:  按键结构变量指针
 499           *      返 回 值: 无
 500           *********************************************************************************************************
 501           */
 502          KEY_T *pBtn;
 503          static void bsp_DetectKey(uint8_t i) {
 504   1              pBtn = &s_tBtn[i];
 505   1              if (pBtn->IsKeyDownFunc()) {
 506   2                      if (pBtn->Count < KEY_FILTER_TIME) {
 507   3                              pBtn->Count = KEY_FILTER_TIME;
 508   3                      } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 509   3                              pBtn->Count++;
 510   3                      } else {
 511   3                              if (pBtn->State == 0) {
 512   4                                      pBtn->State = 1;
 513   4      
 514   4                                      /* 发送按钮按下的消息 */
 515   4                                      bsp_PutKey((uint8_t) (3 * i + 1));
 516   4                              }
 517   3      
 518   3                              if (pBtn->LongTime > 0) {
 519   4                                      if (pBtn->LongCount < pBtn->LongTime) {
 520   5                                              /* 发送按钮持续按下的消息 */
 521   5                                              if (++pBtn->LongCount == pBtn->LongTime) {
 522   6                                                      /* 键值放入按键FIFO */
 523   6                                                      bsp_PutKey((uint8_t) (3 * i + 3));
 524   6                                              }
 525   5                                      } else {
 526   5                                              if (pBtn->RepeatSpeed > 0) {
 527   6                                                      if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 528   7                                                              pBtn->RepeatCount = 0;
 529   7                                                              /* 常按键后，每隔10ms发送1个按键 */
 530   7                                                              bsp_PutKey((uint8_t) (3 * i + 1));
 531   7                                                      }
 532   6                                              }
 533   5                                      }
 534   4                              }
 535   3                      }
 536   2              } else {
 537   2                      if (pBtn->Count > KEY_FILTER_TIME) {
 538   3                              pBtn->Count = KEY_FILTER_TIME;
 539   3                      } else if (pBtn->Count != 0) {
 540   3                              pBtn->Count--;
 541   3                      } else {
 542   3                              if (pBtn->State == 1) {
 543   4                                      pBtn->State = 0;
 544   4      
 545   4                                      /* 发送按钮弹起的消息 */
 546   4                                      bsp_PutKey((uint8_t) (3 * i + 2));
 547   4                              }
 548   3                      }
 549   2                      pBtn->LongCount = 0;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           11/12/2017 23:51:34 PAGE 10  

 550   2                      pBtn->RepeatCount = 0;
 551   2              }
 552   1      }
 553          
 554          /*
 555           *********************************************************************************************************
 556           *      函 数 名: bsp_KeyScan
 557           *      功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 558           *      形    参:  无
 559           *      返 回 值: 无
 560           *********************************************************************************************************
 561           */
 562          void bsp_KeyScan(void) {
 563   1              uint8_t i;
 564   1      
 565   1              for (i = 0; i < KEY_COUNT; i++) {
 566   2                      bsp_DetectKey(i);
 567   2              }
 568   1      }
 569          
 570          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1909    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    280       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
