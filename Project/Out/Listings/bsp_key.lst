C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) TABS(
                    -2) OBJECT(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *  模块名称 : 独立按键驱动模块
   5           *  文件名称 : bsp_key.c
   6           *  版    本 : V1.0
   7           *  说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *        (1) 按键按下
   9           *        (2) 按键弹起
  10           *        (3) 长按键
  11           *        (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          #include <string.h>
  18          
  19          #if 0
              static idata KEY_T s_tBtn[KEY_COUNT];
              static idata KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
              #else
  23          static KEY_T s_tBtn[KEY_COUNT];
  24          static KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  25          #endif
  26          
  27          static void bsp_InitKeyVar(void);
  28          static void bsp_InitKeyHard(void);
  29          static void bsp_DetectKey(uint8_t i);
  30          
  31          /*
  32           *********************************************************************************************************
  33           *  函 数 名: IsKeyDownX
  34           *  功能说明: 判断按键是否按下
  35           *  形    参: 无
  36           *  返 回 值: 返回值1 表示按下，0表示未按下
  37           *********************************************************************************************************
  38           */
  39          
  40          static uint8_t IsKeyDown(uint8_t line, uint8_t column) {
  41   1        uint8_t ret = 0;
  42   1      
  43   1        P02 = 1;
  44   1        P03 = 1;
  45   1        P04 = 1;
  46   1        P05 = 1;
  47   1        P06 = 1;
  48   1        P07 = 1;
  49   1      
  50   1        P14 = 1;
  51   1        P15 = 1;
  52   1        P16 = 1;
  53   1        P17 = 1;
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 2   

  54   1      
  55   1        switch (line) {
  56   2        case 0:
  57   2          P02 = 0;
  58   2          switch (column) {
  59   3          case 0:
  60   3            ret = ~P17;
  61   3            break;
  62   3          case 1:
  63   3            ret = ~P16;
  64   3            break;
  65   3          case 2:
  66   3            ret = ~P15;
  67   3            break;
  68   3          case 3:
  69   3            ret = ~P14;
  70   3            break;
  71   3          default:
  72   3            break;
  73   3          }
  74   2          break;
  75   2        case 1:
  76   2          P03 = 0;
  77   2          switch (column) {
  78   3          case 0:
  79   3            ret = ~P17;
  80   3            break;
  81   3          case 1:
  82   3            ret = ~P16;
  83   3            break;
  84   3          case 2:
  85   3            ret = ~P15;
  86   3            break;
  87   3          case 3:
  88   3            ret = ~P14;
  89   3            break;
  90   3          default:
  91   3            break;
  92   3          }
  93   2          break;
  94   2        case 2:
  95   2          P04 = 0;
  96   2          switch (column) {
  97   3          case 0:
  98   3            ret = ~P17;
  99   3            break;
 100   3          case 1:
 101   3            ret = ~P16;
 102   3            break;
 103   3          case 2:
 104   3            ret = ~P15;
 105   3            break;
 106   3          case 3:
 107   3            ret = ~P14;
 108   3            break;
 109   3          default:
 110   3            break;
 111   3          }
 112   2          break;
 113   2        case 3:
 114   2          P05 = 0;
 115   2          switch (column) {
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 3   

 116   3          case 0:
 117   3            ret = ~P17;
 118   3            break;
 119   3          case 1:
 120   3            ret = ~P16;
 121   3            break;
 122   3          case 2:
 123   3            ret = ~P15;
 124   3            break;
 125   3          case 3:
 126   3            ret = ~P14;
 127   3            break;
 128   3          default:
 129   3            break;
 130   3          }
 131   2          break;
 132   2        case 4:
 133   2          P06 = 0;
 134   2          switch (column) {
 135   3          case 0:
 136   3            ret = ~P17;
 137   3            break;
 138   3          case 1:
 139   3            ret = ~P16;
 140   3            break;
 141   3          case 2:
 142   3            ret = ~P15;
 143   3            break;
 144   3          case 3:
 145   3            ret = ~P14;
 146   3            break;
 147   3          default:
 148   3            break;
 149   3          }
 150   2          break;
 151   2        case 5:
 152   2          P07 = 0;
 153   2          switch (column) {
 154   3          case 0:
 155   3            ret = ~P17;
 156   3            break;
 157   3          case 1:
 158   3            ret = ~P16;
 159   3            break;
 160   3          case 2:
 161   3            ret = ~P15;
 162   3            break;
 163   3          case 3:
 164   3            ret = ~P14;
 165   3            break;
 166   3          default:
 167   3            break;
 168   3          }
 169   2          break;
 170   2        }
 171   1      
 172   1        return ret;
 173   1      }
 174          
 175          static uint8_t IsKeyDown1(void) {
 176   1        return IsKeyDown(0, 0);
 177   1      }
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 4   

 178          
 179          static uint8_t IsKeyDown2(void) {
 180   1        return IsKeyDown(0, 1);
 181   1      }
 182          
 183          static uint8_t IsKeyDown3(void) {
 184   1        return IsKeyDown(0, 2);
 185   1      }
 186          //CH1, S4 ad = 884
 187          static uint8_t IsKeyDown4(void) {
 188   1        return IsKeyDown(0, 3);
 189   1      }
 190          
 191          static uint8_t IsKeyDown5(void) {
 192   1      
 193   1        return IsKeyDown(1, 0);
 194   1      }
 195          
 196          static uint8_t IsKeyDown6(void) {
 197   1        return IsKeyDown(1, 1);
 198   1      }
 199          
 200          static uint8_t IsKeyDown7(void) {
 201   1        return IsKeyDown(1, 2);
 202   1      }
 203          
 204          static uint8_t IsKeyDown8(void) {
 205   1        return IsKeyDown(1, 3);
 206   1      }
 207          
 208          static uint8_t IsKeyDown9(void) {
 209   1        return IsKeyDown(2, 0);
 210   1      }
 211          
 212          static uint8_t IsKeyDown10(void) {
 213   1        return IsKeyDown(2, 1);
 214   1      }
 215          static uint8_t IsKeyDown11(void) {
 216   1        return IsKeyDown(2, 2);
 217   1      }
 218          static uint8_t IsKeyDown12(void) {
 219   1        return IsKeyDown(2, 3);
 220   1      }
 221          static uint8_t IsKeyDown13(void) {
 222   1        return IsKeyDown(3, 0);
 223   1      }
 224          static uint8_t IsKeyDown14(void) {
 225   1        return IsKeyDown(3, 1);
 226   1      }
 227          static uint8_t IsKeyDown15(void) {
 228   1        return IsKeyDown(3, 2);
 229   1      }
 230          static uint8_t IsKeyDown16(void) {
 231   1        return IsKeyDown(3, 3);
 232   1      }
 233          static uint8_t IsKeyDown17(void) {
 234   1        return IsKeyDown(4, 0);
 235   1      }
 236          static uint8_t IsKeyDown18(void) {
 237   1        return IsKeyDown(4, 1);
 238   1      }
 239          static uint8_t IsKeyDown19(void) {
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 5   

 240   1        return IsKeyDown(4, 2);
 241   1      }
 242          static uint8_t IsKeyDown20(void) {
 243   1        return IsKeyDown(4, 3);
 244   1      }
 245          static uint8_t IsKeyDown21(void) {
 246   1        return IsKeyDown(5, 0);
 247   1      }
 248          static uint8_t IsKeyDown22(void) {
 249   1        return IsKeyDown(5, 1);
 250   1      }
 251          static uint8_t IsKeyDown23(void) {
 252   1        return IsKeyDown(5, 2);
 253   1      }
 254          static uint8_t IsKeyDown24(void) {
 255   1        return IsKeyDown(5, 3);
 256   1      }
 257          
 258          static uint8_t IsKeyDown21_and_24(void) {
 259   1        if (IsKeyDown(5, 0) && IsKeyDown(5, 3)) {
 260   2          return 1;
 261   2        }
 262   1        return 0;
 263   1      }
 264          
 265          /*
 266           *********************************************************************************************************
 267           *  函 数 名: bsp_InitKey
 268           *  功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
 269           *  形    参:  无
 270           *  返 回 值: 无
 271           *********************************************************************************************************
 272           */
 273          void bsp_InitKey(void) {
 274   1        bsp_InitKeyVar(); /* 初始化按键变量 */
 275   1        bsp_InitKeyHard(); /* 初始化按键硬件 */
 276   1      }
 277          
 278          /*
 279           *********************************************************************************************************
 280           *  函 数 名: bsp_PutKey
 281           *  功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
 282           *  形    参:  _KeyCode : 按键代码
 283           *  返 回 值: 无
 284           *********************************************************************************************************
 285           */
 286          void bsp_PutKey(uint8_t _KeyCode) {
 287   1        s_tKey.Buf[s_tKey.Write] = _KeyCode;
 288   1      
 289   1        if (++s_tKey.Write >= KEY_FIFO_SIZE) {
 290   2          s_tKey.Write = 0;
 291   2        }
 292   1      }
 293          
 294          /*
 295           *********************************************************************************************************
 296           *  函 数 名: bsp_GetKey
 297           *  功能说明: 从按键FIFO缓冲区读取一个键值。
 298           *  形    参:  无
 299           *  返 回 值: 按键代码
 300           *********************************************************************************************************
 301           */
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 6   

 302          uint8_t bsp_GetKey(void) {
 303   1        uint8_t ret;
 304   1      
 305   1        if (s_tKey.Read == s_tKey.Write) {
 306   2          return KEY_NONE;
 307   2        } else {
 308   2          ret = s_tKey.Buf[s_tKey.Read];
 309   2      
 310   2          if (++s_tKey.Read >= KEY_FIFO_SIZE) {
 311   3            s_tKey.Read = 0;
 312   3          }
 313   2          return ret;
 314   2        }
 315   1      }
 316          
 317          /*
 318           *********************************************************************************************************
 319           *  函 数 名: bsp_GetKey2
 320           *  功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
 321           *  形    参:  无
 322           *  返 回 值: 按键代码
 323           *********************************************************************************************************
 324           */
 325          uint8_t bsp_GetKey2(void) {
 326   1        uint8_t ret;
 327   1      
 328   1        if (s_tKey.Read2 == s_tKey.Write) {
 329   2          return KEY_NONE;
 330   2        } else {
 331   2          ret = s_tKey.Buf[s_tKey.Read2];
 332   2      
 333   2          if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 334   3            s_tKey.Read2 = 0;
 335   3          }
 336   2          return ret;
 337   2        }
 338   1      }
 339          
 340          /*
 341           *********************************************************************************************************
 342           *  函 数 名: bsp_GetKeyState
 343           *  功能说明: 读取按键的状态
 344           *  形    参:  _ucKeyID : 按键ID，从0开始
 345           *  返 回 值: 1 表示按下， 0 表示未按下
 346           *********************************************************************************************************
 347           */
 348          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 349   1        return s_tBtn[_ucKeyID].State;
 350   1      }
 351          
 352          /*
 353           *********************************************************************************************************
 354           *  函 数 名: bsp_SetKeyParam
 355           *  功能说明: 设置按键参数
 356           *  形    参：_ucKeyID : 按键ID，从0开始
 357           *      _LongTime : 长按事件时间
 358           *       _RepeatSpeed : 连发速度
 359           *  返 回 值: 无
 360           *********************************************************************************************************
 361           */
 362          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 363   1        s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 7   

 364   1        s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 365   1        s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 366   1      }
 367          
 368          /*
 369           *********************************************************************************************************
 370           *  函 数 名: bsp_ClearKey
 371           *  功能说明: 清空按键FIFO缓冲区
 372           *  形    参：无
 373           *  返 回 值: 按键代码
 374           *********************************************************************************************************
 375           */
 376          void bsp_ClearKey(void) {
 377   1        s_tKey.Read = s_tKey.Write;
 378   1      }
 379          
 380          /*
 381           *********************************************************************************************************
 382           *  函 数 名: bsp_InitKeyHard
 383           *  功能说明: 配置按键对应的GPIO
 384           *  形    参:  无
 385           *  返 回 值: 无
 386           *********************************************************************************************************
 387           */
 388          static void bsp_InitKeyHard(void) {
 389   1        clr_P0M1_2;
 390   1        clr_P0M2_2;
 391   1      
 392   1        clr_P0M1_3;
 393   1        clr_P0M2_3;
 394   1      
 395   1        clr_P0M1_4;
 396   1        clr_P0M2_4;
 397   1      
 398   1        clr_P0M1_5;
 399   1        clr_P0M2_5;
 400   1      
 401   1        clr_P0M1_6;
 402   1        clr_P0M2_6;
 403   1      
 404   1        clr_P0M1_7;
 405   1        clr_P0M2_7;
 406   1      
 407   1        clr_P1M1_4;
 408   1        P1M2 &= ~0x10;
 409   1      
 410   1        clr_P1M1_5;
 411   1        P1M2 &= ~0x20;
 412   1      
 413   1        clr_P1M1_6;
 414   1        P1M2 &= ~0x40;
 415   1      
 416   1        clr_P1M1_7;
 417   1        P1M2 &= ~0x80;
 418   1      }
 419          
 420          /*
 421           *********************************************************************************************************
 422           *  函 数 名: bsp_InitKeyVar
 423           *  功能说明: 初始化按键变量
 424           *  形    参:  无
 425           *  返 回 值: 无
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 8   

 426           *********************************************************************************************************
 427           */
 428          static void bsp_InitKeyVar(void) {
 429   1        uint8_t i = 0;
 430   1      
 431   1        memset((uint8_t *) &s_tBtn, 0, sizeof(s_tBtn));
 432   1      
 433   1        /* 对按键FIFO读写指针清零 */
 434   1        s_tKey.Read = 0;
 435   1        s_tKey.Write = 0;
 436   1        s_tKey.Read2 = 0;
 437   1      
 438   1        /* 给每个按键结构体成员变量赋一组缺省值 */
 439   1        for (i = 0; i < KEY_COUNT; i++) {
 440   2          s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 441   2          s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 442   2          s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 443   2          //s_tBtn[i].KeyCodeDown = 3 * i + 1;        /* 按键按下的键值代码 */
 444   2          //s_tBtn[i].KeyCodeUp   = 3 * i + 2;        /* 按键弹起的键值代码 */
 445   2          //s_tBtn[i].KeyCodeLong = 3 * i + 3;        /* 按键被持续按下的键值代码 */
 446   2          s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 447   2          s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 448   2        }
 449   1      
 450   1        s_tBtn[1].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 451   1        s_tBtn[3].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 452   1      
 453   1        s_tBtn[6].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 454   1        s_tBtn[14].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 455   1      
 456   1        s_tBtn[9].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 457   1        s_tBtn[11].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 458   1      
 459   1        s_tBtn[13].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 460   1        s_tBtn[17].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 461   1      
 462   1        s_tBtn[15].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 463   1        s_tBtn[19].RepeatSpeed = 40; /* 按键连发的速度，0表示不支持连发 */
 464   1        /* 判断按键按下的函数 */
 465   1        i = 0;
 466   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown1;
 467   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown2;
 468   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown3;
 469   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown4;
 470   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown5;
 471   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown6;
 472   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown7;
 473   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown8;
 474   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown9;
 475   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown10;
 476   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown11;
 477   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown12;
 478   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown13;
 479   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown14;
 480   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown15;
 481   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown16;
 482   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown17;
 483   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown18;
 484   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown19;
 485   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown20;
 486   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown21;
 487   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown22;
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 9   

 488   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown23;
 489   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown24;
 490   1        s_tBtn[i++].IsKeyDownFunc = IsKeyDown21_and_24;
 491   1      }
 492          
 493          /*
 494           *********************************************************************************************************
 495           *  函 数 名: bsp_DetectKey
 496           *  功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 497           *  形    参:  按键结构变量指针
 498           *  返 回 值: 无
 499           *********************************************************************************************************
 500           */
 501          KEY_T *pBtn;
 502          static void bsp_DetectKey(uint8_t i) {
 503   1        pBtn = &s_tBtn[i];
 504   1        if (pBtn->IsKeyDownFunc()) {
 505   2          if (pBtn->Count < KEY_FILTER_TIME) {
 506   3            pBtn->Count = KEY_FILTER_TIME;
 507   3          } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 508   3            pBtn->Count++;
 509   3          } else {
 510   3            if (pBtn->State == 0) {
 511   4              pBtn->State = 1;
 512   4      
 513   4              /* 发送按钮按下的消息 */
 514   4              bsp_PutKey((uint8_t) (3 * i + 1));
 515   4            }
 516   3      
 517   3            if (pBtn->LongTime > 0) {
 518   4              if (pBtn->LongCount < pBtn->LongTime) {
 519   5                /* 发送按钮持续按下的消息 */
 520   5                if (++pBtn->LongCount == pBtn->LongTime) {
 521   6                  /* 键值放入按键FIFO */
 522   6                  bsp_PutKey((uint8_t) (3 * i + 3));
 523   6                }
 524   5              } else {
 525   5                if (pBtn->RepeatSpeed > 0) {
 526   6                  if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 527   7                    pBtn->RepeatCount = 0;
 528   7                    /* 常按键后，每隔10ms发送1个按键 */
 529   7                    bsp_PutKey((uint8_t) (3 * i + 1));
 530   7                  }
 531   6                }
 532   5              }
 533   4            }
 534   3          }
 535   2        } else {
 536   2          if (pBtn->Count > KEY_FILTER_TIME) {
 537   3            pBtn->Count = KEY_FILTER_TIME;
 538   3          } else if (pBtn->Count != 0) {
 539   3            pBtn->Count--;
 540   3          } else {
 541   3            if (pBtn->State == 1) {
 542   4              pBtn->State = 0;
 543   4      
 544   4              /* 发送按钮弹起的消息 */
 545   4              bsp_PutKey((uint8_t) (3 * i + 2));
 546   4            }
 547   3          }
 548   2          pBtn->LongCount = 0;
 549   2          pBtn->RepeatCount = 0;
C51 COMPILER V9.52.0.0   BSP_KEY                                                           12/16/2017 10:54:39 PAGE 10  

 550   2        }
 551   1      }
 552          
 553          /*
 554           *********************************************************************************************************
 555           *  函 数 名: bsp_KeyScan
 556           *  功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 557           *  形    参:  无
 558           *  返 回 值: 无
 559           *********************************************************************************************************
 560           */
 561          void bsp_KeyScan(void) {
 562   1        uint8_t i;
 563   1      
 564   1        for (i = 0; i < KEY_COUNT; i++) {
 565   2          bsp_DetectKey(i);
 566   2        }
 567   1      }
 568          
 569          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1919    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    291       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
